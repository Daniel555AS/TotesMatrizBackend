// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "support@totesbackend.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/additional-expenses": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves all additional expense records. Requires permission to view all additional expenses.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "additional-expenses"
                ],
                "summary": "Get all additional expenses",
                "responses": {
                    "200": {
                        "description": "A list of all additional expenses",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AdditionalExpense"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error retrieving additional expenses",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new additional expense record. Requires permission to create an additional expense.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "additional-expenses"
                ],
                "summary": "Create a new additional expense",
                "parameters": [
                    {
                        "description": "Additional Expense DTO",
                        "name": "expense",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.UpdateAdditionalExpenseDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The created additional expense",
                        "schema": {
                            "$ref": "#/definitions/models.AdditionalExpense"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error creating additional expense",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/additional-expenses/{id}": {
            "get": {
                "description": "Retrieves an additional expense record by its ID. Requires permission to view additional expenses by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "additional-expenses"
                ],
                "summary": "Get additional expense by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the additional expense",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The additional expense record",
                        "schema": {
                            "$ref": "#/definitions/models.AdditionalExpense"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Additional expense not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error (log registration or DB error)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates the details of an existing additional expense identified by its ID. Requires permission to update an additional expense.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "additional-expenses"
                ],
                "summary": "Update an additional expense by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Additional Expense ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated Additional Expense details",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.UpdateAdditionalExpenseDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated additional expense",
                        "schema": {
                            "$ref": "#/definitions/models.AdditionalExpense"
                        }
                    },
                    "400": {
                        "description": "Invalid request or JSON format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Additional expense not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes an additional expense record by its ID. Requires permission to delete an additional expense.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "additional-expenses"
                ],
                "summary": "Delete an additional expense by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Additional Expense ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message indicating successful deletion",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format or request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Additional expense not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error deleting additional expense",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/appointments": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a list of all appointments. Requires proper permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "appointments"
                ],
                "summary": "Get all appointments",
                "responses": {
                    "200": {
                        "description": "List of all appointments",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Appointment"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error retrieving appointments or logging",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new appointment in the system. Requires permission to create appointments.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "appointments"
                ],
                "summary": "Create a new appointment",
                "parameters": [
                    {
                        "description": "Appointment data to create",
                        "name": "appointment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Appointment"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Appointment successfully created",
                        "schema": {
                            "$ref": "#/definitions/models.Appointment"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON format or appointment limit reached",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden, no permission to create appointments",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error creating appointment or logging",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/appointments/byCustomerIdAndDate": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve an appointment based on the customer ID and appointment date. Requires permission to get appointments.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "appointments"
                ],
                "summary": "Get appointment by customer ID and date",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "customerId",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Appointment date and time (format: YYYY-MM-DD HH:MM:SS)",
                        "name": "dateTime",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Appointment successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/models.Appointment"
                        }
                    },
                    "400": {
                        "description": "Invalid customer ID or date format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Appointment not found for the given customer ID and date",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error retrieving appointment or logging",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/appointments/customer/{customerID}": {
            "get": {
                "description": "Retrieves a list of appointments associated with a specific customer. Requires permission to view appointments by customer ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "appointments"
                ],
                "summary": "Get appointments by customer ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of the customer",
                        "name": "customerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of appointments",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Appointment"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid customer ID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error retrieving appointments",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/appointments/deleteAppointment/{id}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete an appointment based on the appointment ID. Requires permission to delete appointments.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "appointments"
                ],
                "summary": "Delete appointment by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Appointment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Appointment deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid appointment ID format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Appointment not found for the given ID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error deleting the appointment",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/appointments/hourly-count": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves the number of appointments for each hour within a specified date. Requires permission to view appointments by hour.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "appointments"
                ],
                "summary": "Get appointment count by hourly range for a specific date",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Date in YYYY-MM-DD format",
                        "name": "date",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of hourly appointment counts",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Appointment"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid date format or missing 'date' parameter",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error retrieving appointment counts",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/appointments/searchByCustomerID": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Search appointments by the customer's ID. Requires permission to access this data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "appointments"
                ],
                "summary": "Search appointments by Customer ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID to search appointments",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of appointments found",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Appointment"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "No appointments found for the given customer ID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error retrieving appointments or logging",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/appointments/searchByID": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Search appointments using a partial or complete ID string. Requires permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "appointments"
                ],
                "summary": "Search appointments by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Appointment ID to search",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Appointment"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "No appointments found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error retrieving appointments or logging",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/appointments/searchByState": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Search appointments based on their state (e.g., confirmed, pending). Requires permission to access this data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "appointments"
                ],
                "summary": "Search appointments by state",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "State of the appointment (true for confirmed, false for pending)",
                        "name": "state",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of appointments found based on state",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Appointment"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid state value provided",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error retrieving appointments or logging",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/appointments/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves an appointment by its unique ID. Requires permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "appointments"
                ],
                "summary": "Get Appointment by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Appointment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The appointment object",
                        "schema": {
                            "$ref": "#/definitions/models.Appointment"
                        }
                    },
                    "400": {
                        "description": "Invalid appointment ID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Appointment not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update the details of an existing appointment. Requires permission to update appointments.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "appointments"
                ],
                "summary": "Update an existing appointment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Appointment ID to update",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Appointment data to update",
                        "name": "appointment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Appointment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Appointment successfully updated",
                        "schema": {
                            "$ref": "#/definitions/models.Appointment"
                        }
                    },
                    "400": {
                        "description": "Invalid appointment ID or JSON format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden, no permission to update appointments",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Appointment not found for update",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error updating appointment or logging",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/check-permission": {
            "get": {
                "description": "Verifies if the user with the provided email has the specified permission ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authorization"
                ],
                "summary": "Check if a user has a specific permission",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User's email address",
                        "name": "email",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Permission ID to check",
                        "name": "permission_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response with the permission status",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid or missing parameters",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error checking permission",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/billing/subtotal": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Calculates the subtotal based on a list of billing items. Requires permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "billing"
                ],
                "summary": "Calculate subtotal",
                "parameters": [
                    {
                        "description": "List of billing items",
                        "name": "items",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.BillingItemDTO"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Calculated subtotal",
                        "schema": {
                            "$ref": "#/definitions/controllers.SubtotalResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Calculation error (e.g., related data not found)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/billing/total": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Calculates the total amount based on billing items, discounts, and tax types. Requires permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "billing"
                ],
                "summary": "Calculate total",
                "parameters": [
                    {
                        "description": "Billing total calculation input",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.CalculateTotalRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Calculated total",
                        "schema": {
                            "$ref": "#/definitions/controllers.TotalResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Calculation error (e.g., related data not found)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/comments": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a list of all submitted comments. Requires permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Get all comments",
                "responses": {
                    "200": {
                        "description": "List of all comments",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.GetCommentDTO"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch comments or register log",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new comment. Requires permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Create a comment",
                "parameters": [
                    {
                        "description": "Comment data to create",
                        "name": "comment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.CreateCommentDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created comment",
                        "schema": {
                            "$ref": "#/definitions/dtos.GetCommentDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create comment or register log",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/comments/searchByEmail": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves all comments that match the provided email address. Requires permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Search comments by email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Email address to search comments by",
                        "name": "email",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of matching comments",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.GetCommentDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Email parameter is required",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to search comments or register log",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/comments/searchByID": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Searches for comments using a given ID. Requires appropriate permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Search comments by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID to search for comments",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of comments matching the ID",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.GetCommentDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "No comments found for the given ID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or failure in processing",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/comments/searchByName": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Searches for comments using a given name. Requires appropriate permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Search comments by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name to search for comments",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of comments matching the name",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.GetCommentDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "No comments found for the given name",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or failure in processing",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/comments/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a comment by its unique ID. Requires permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Get comment by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Comment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The retrieved comment",
                        "schema": {
                            "$ref": "#/definitions/dtos.GetCommentDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid comment ID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Comment not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error retrieving comment or registering log",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates an existing comment by ID. Requires permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Update a comment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Comment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated comment data",
                        "name": "comment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.UpdateCommentDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated comment",
                        "schema": {
                            "$ref": "#/definitions/dtos.GetCommentDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid ID or request data",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Comment not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or failed update",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/customers": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a list of all customers from the system. Requires appropriate permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Retrieve all customers",
                "responses": {
                    "200": {
                        "description": "List of all customers",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Customer"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or failure in retrieving customers",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new customer record in the system. Requires appropriate permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Create a new customer",
                "parameters": [
                    {
                        "description": "New customer data",
                        "name": "customer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.CreateCustomerDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The created customer",
                        "schema": {
                            "$ref": "#/definitions/models.Customer"
                        }
                    },
                    "400": {
                        "description": "Invalid input data (JSON format or missing fields)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or failure in creating customer",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/customers/customerID/{customerID}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a specific customer from the system based on their customerID. Requires appropriate permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Retrieve a customer by customerID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "customerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Customer data",
                        "schema": {
                            "$ref": "#/definitions/models.Customer"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Customer not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or failure in retrieving customer",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/customers/email/{email}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a customer record from the system based on their email. Requires appropriate permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Retrieve a customer by email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer email",
                        "name": "email",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Customer data",
                        "schema": {
                            "$ref": "#/definitions/models.Customer"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Customer not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or failure in retrieving customer",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/customers/searchByID": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Searches for customers based on a query ID. Requires appropriate permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Search customers by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID query",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of customers matching the search",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.GetCustomerDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query or request format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "No customers found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or failure in retrieving customers",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/customers/searchByLastName": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Searches for customers based on a last name query. Requires appropriate permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Search customers by last name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer last name query",
                        "name": "lastName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of customers matching the search",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.GetCustomerDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query or request format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "No customers found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or failure in retrieving customers",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/customers/searchByName": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Searches for customers based on a name query. Requires appropriate permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Search customers by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer name query",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of customers matching the search",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.GetCustomerDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query or request format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "No customers found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or failure in retrieving customers",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/customers/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a specific customer from the system based on their ID. Requires appropriate permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Retrieve a customer by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Customer data",
                        "schema": {
                            "$ref": "#/definitions/models.Customer"
                        }
                    },
                    "400": {
                        "description": "Invalid customer ID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Customer not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or failure in retrieving customer",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates an existing customer's data in the system. Requires appropriate permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Update an existing customer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated customer data",
                        "name": "customer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.UpdateCustomerDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The updated customer",
                        "schema": {
                            "$ref": "#/definitions/models.Customer"
                        }
                    },
                    "400": {
                        "description": "Invalid input data (ID format or JSON format)",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Customer not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or failure in updating customer",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/discount-types": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves all available discount types. Requires appropriate permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "discount-types"
                ],
                "summary": "Get all discount types",
                "responses": {
                    "200": {
                        "description": "List of all discount types",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.DiscountType"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or failure in retrieving discount types",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows the creation of a new discount type in the system. Requires appropriate permissions.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "discount-types"
                ],
                "summary": "Create a new discount type",
                "parameters": [
                    {
                        "description": "Discount type details",
                        "name": "discountType",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DiscountType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created discount type",
                        "schema": {
                            "$ref": "#/definitions/models.DiscountType"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or failure in creating the discount type",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/discount-types/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a specific discount type based on its ID. Requires appropriate permission.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "discount-types"
                ],
                "summary": "Get a discount type by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Discount Type ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested discount type",
                        "schema": {
                            "$ref": "#/definitions/models.DiscountType"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Discount type not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error or failure in retrieving discount type",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/employees": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a list of all employees in the system. Requires the appropriate permissions.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "employees"
                ],
                "summary": "Get all employees",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of employees",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.GetEmployeeDTO"
                            }
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error retrieving employees",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new employee. The request body must contain the employee details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "employees"
                ],
                "summary": "Create a new employee",
                "parameters": [
                    {
                        "description": "Employee information",
                        "name": "employee",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.CreateEmployeeDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created employee",
                        "schema": {
                            "$ref": "#/definitions/dtos.GetEmployeeDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON format, or missing fields",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Employee with this Personal ID already exists",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error creating employee",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/employees/searchByID": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Searches for employees by a given ID. Returns a list of employees that match the ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "employees"
                ],
                "summary": "Search employees by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Employee ID to search for",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully found employees matching ID",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.GetEmployeeDTO"
                            }
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "No employees found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error retrieving employees",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/employees/searchByName": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Searches for employees by their name. Returns a list of employees that match the name.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "employees"
                ],
                "summary": "Search employees by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Employee name to search for",
                        "name": "names",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully found employees matching name",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.GetEmployeeDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Search query is required",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "No employees found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error retrieving employees",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/employees/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a specific employee by their unique ID from the system. Requires the appropriate permissions.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "employees"
                ],
                "summary": "Get employee by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Employee ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved employee details",
                        "schema": {
                            "$ref": "#/definitions/dtos.GetEmployeeDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid employee ID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Employee not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates an employee's details by ID. The request body must contain the updated employee information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "employees"
                ],
                "summary": "Update an existing employee",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Employee ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated employee information",
                        "name": "employee",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.UpdateEmployeeDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated employee",
                        "schema": {
                            "$ref": "#/definitions/dtos.GetEmployeeDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Employee not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error updating employee",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/external-sales": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a list of all external sales, including related items and customers.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "external-sales"
                ],
                "summary": "Retrieve all external sales",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved all external sales",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.GetExternalSaleDTO"
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error retrieving external sales",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new external sale, including the sale details and customer information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "external-sales"
                ],
                "summary": "Create a new external sale",
                "parameters": [
                    {
                        "description": "External Sale data",
                        "name": "external-sale",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.CreateExternalSaleDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created external sale",
                        "schema": {
                            "$ref": "#/definitions/dtos.GetExternalSaleDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error creating external sale",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/external-sales/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches the details of a specific external sale by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "external-sales"
                ],
                "summary": "Retrieve external sale by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "External Sale ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved external sale",
                        "schema": {
                            "$ref": "#/definitions/dtos.GetExternalSaleDTO"
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "External sale not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error retrieving external sale",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Returns a 200 status if the server is running correctly.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Health Check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResponse"
                        }
                    }
                }
            }
        },
        "/historical-item-prices/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves the historical prices for an item based on the item ID provided.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "historical-item-prices"
                ],
                "summary": "Get historical price for an item",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Item ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved historical prices",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.HistoricalItemPrice"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Item ID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "No historical prices found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve historical prices",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/identifier-types": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a list of all available identifier types.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "identifier-types"
                ],
                "summary": "Get all identifier types",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved identifier types",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.IdentifierType"
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error retrieving identifier types",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/identifier-types/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves an identifier type by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "identifier-types"
                ],
                "summary": "Get identifier type by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Identifier Type ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved identifier type",
                        "schema": {
                            "$ref": "#/definitions/models.IdentifierType"
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Identifier Type not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/invoices": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves all invoices from the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "invoices"
                ],
                "summary": "Get all invoices",
                "responses": {
                    "200": {
                        "description": "List of all invoices",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.GetInvoiceDTO"
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "No invoices found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new invoice based on the provided JSON data. Requires appropriate permissions.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "invoices"
                ],
                "summary": "Create a new invoice",
                "parameters": [
                    {
                        "description": "Invoice data",
                        "name": "invoice_body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.CreateInvoiceDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created invoice",
                        "schema": {
                            "$ref": "#/definitions/dtos.GetInvoiceDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error creating invoice",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/invoices/searchById": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Search for invoices using a query parameter for the invoice ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "invoices"
                ],
                "summary": "Search invoices by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invoice ID Query",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of invoices found",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.GetInvoiceDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Query parameter is required",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "No invoices found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/invoices/searchByPersonalId": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Search for invoices using a query parameter for the customer's personal ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "invoices"
                ],
                "summary": "Search invoices by customer personal ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer Personal ID Query",
                        "name": "personal_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of invoices found",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.GetInvoiceDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Query parameter 'personal_id' is required",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "No invoices found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/invoices/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves an invoice by its unique ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "invoices"
                ],
                "summary": "Get invoice by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invoice details",
                        "schema": {
                            "$ref": "#/definitions/dtos.GetInvoiceDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid invoice ID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Invoice not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/item-types": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a list of all item types.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "item-types"
                ],
                "summary": "Get all item types",
                "responses": {
                    "200": {
                        "description": "List of item types retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ItemType"
                            }
                        }
                    },
                    "500": {
                        "description": "Error retrieving item types or registering log",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/item-types/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves the details of a specific item type by its ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "item-types"
                ],
                "summary": "Get item type by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Item Type ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Item Type retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.ItemType"
                        }
                    },
                    "404": {
                        "description": "Item Type not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error registering log",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/items": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a list of all items available in the inventory.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "items"
                ],
                "summary": "Get all items",
                "responses": {
                    "200": {
                        "description": "List of items",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.GetItemDTO"
                            }
                        }
                    },
                    "500": {
                        "description": "Error retrieving items",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new item with the provided data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "items"
                ],
                "summary": "Create a new item",
                "parameters": [
                    {
                        "description": "Item to create",
                        "name": "item",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.UpdateItemDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Item created successfully",
                        "schema": {
                            "$ref": "#/definitions/dtos.GetItemDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error creating item",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/items/searchById": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Search for items in the inventory by their ID using a query parameter.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "items"
                ],
                "summary": "Search items by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Item ID to search for",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of items matching the search criteria",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.GetItemDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Missing or invalid search query",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "No items found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error retrieving items",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/items/searchByName": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Search for items in the inventory by their name using a query parameter.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "items"
                ],
                "summary": "Search items by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Item name to search for",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of items matching the search criteria",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.GetItemDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Missing or invalid search query",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "No items found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error retrieving items",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/items/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve an item by its unique ID from the inventory.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "items"
                ],
                "summary": "Get item by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Item ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Item found",
                        "schema": {
                            "$ref": "#/definitions/dtos.GetItemDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid item ID format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Item not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error fetching item",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates the information of an existing item by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "items"
                ],
                "summary": "Update an item",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the item to update",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated item data",
                        "name": "item",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.UpdateItemDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Item updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dtos.GetItemDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Item not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error updating item",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/items/{id}/state": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates the state (active/inactive) of an item by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "items"
                ],
                "summary": "Update the state of an item",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the item to update",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New state for the item (true for active, false for inactive)",
                        "name": "item_state",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated item information",
                        "schema": {
                            "$ref": "#/definitions/dtos.GetItemDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Item not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error updating item state",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/items/{id}/stock": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Check if the specified quantity of an item is available in stock.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "items"
                ],
                "summary": "Check item stock availability",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Item ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Quantity to check",
                        "name": "quantity",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Indicates whether the stock is sufficient or not",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "400": {
                        "description": "Invalid quantity",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error checking stock",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Validates the user's credentials (email and password) for login.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Validate user credentials",
                "parameters": [
                    {
                        "description": "User credentials to validate",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.LoginData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful message",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid email or password",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "User account is not active",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error validating credentials",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/order-state-types": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a list of all available order state types.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order-state-types"
                ],
                "summary": "Get all order state types",
                "responses": {
                    "200": {
                        "description": "List of order state types",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.OrderStateType"
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/order-state-types/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a specific order state type using its ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order-state-types"
                ],
                "summary": "Get order state type by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order State Type ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order state type retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.OrderStateType"
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Order state type not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/permissions": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a list of all permissions available in the system.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "permissions"
                ],
                "summary": "Get all permissions",
                "responses": {
                    "200": {
                        "description": "List of permissions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Permission"
                            }
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/permissions/searchByID": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a list of permissions that match the given ID pattern.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "permissions"
                ],
                "summary": "Search permissions by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID to search for (partial or full match)",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of matching permissions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Permission"
                            }
                        }
                    },
                    "400": {
                        "description": "Missing or invalid query parameter",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/permissions/searchByName": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a list of permissions that match the given name pattern.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "permissions"
                ],
                "summary": "Search permissions by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name to search for (partial or full match)",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of matching permissions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Permission"
                            }
                        }
                    },
                    "400": {
                        "description": "Missing or invalid query parameter",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/permissions/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a specific permission by its unique ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "permissions"
                ],
                "summary": "Get permission by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Permission ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Permission data",
                        "schema": {
                            "$ref": "#/definitions/models.Permission"
                        }
                    },
                    "400": {
                        "description": "Invalid permission ID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Permission not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/purchase-orders": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves all purchase orders from the system.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase_orders"
                ],
                "summary": "Get all purchase orders",
                "responses": {
                    "200": {
                        "description": "List of Purchase Orders",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.GetPurchaseOrderDTO"
                            }
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Purchase Orders not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new Purchase Order with the provided details and return the created order data.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase_orders"
                ],
                "summary": "Create a new Purchase Order",
                "parameters": [
                    {
                        "description": "Purchase Order details",
                        "name": "purchase_order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.CreatePurchaseOrderDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created Purchase Order",
                        "schema": {
                            "$ref": "#/definitions/dtos.GetPurchaseOrderDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/purchase-orders/customers/{customerID}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve all Purchase Orders associated with a specific Customer ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase_orders"
                ],
                "summary": "Get Purchase Orders by Customer ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "customerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Purchase Orders for the specified Customer ID",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.GetPurchaseOrderDTO"
                            }
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Purchase Orders not found for the specified Customer ID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/purchase-orders/searchByID": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Search for Purchase Orders based on a given ID query parameter.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase_orders"
                ],
                "summary": "Search Purchase Orders by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Order ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Purchase Orders",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.GetPurchaseOrderDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Missing 'id' query parameter",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Purchase Orders not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/purchase-orders/seller/{sellerID}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve all Purchase Orders associated with a specific Seller ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase_orders"
                ],
                "summary": "Get Purchase Orders by Seller ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "sellerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Purchase Orders for the specified Seller ID",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.GetPurchaseOrderDTO"
                            }
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Purchase Orders not found for the specified Seller ID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/purchase-orders/state/{stateID}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves all purchase orders that match the given state ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase_orders"
                ],
                "summary": "Get purchase orders by state ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "State ID",
                        "name": "stateID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Purchase Orders",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.GetPurchaseOrderDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid State ID format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Purchase Orders not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/purchase-orders/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves the details of a purchase order based on the provided ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase_orders"
                ],
                "summary": "Get purchase order by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Purchase Order details",
                        "schema": {
                            "$ref": "#/definitions/dtos.GetPurchaseOrderDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Purchase Order not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/purchase-orders/{id}/state": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update the state of a specific Purchase Order based on its ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "purchase_orders"
                ],
                "summary": "Change the state of a Purchase Order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Purchase Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Order State ID",
                        "name": "order_state_id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated Purchase Order and associated Invoice",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Purchase Order not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/roles": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a list of all roles, including their associated permissions.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Get all roles",
                "responses": {
                    "200": {
                        "description": "List of roles with permissions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.RoleDTO"
                            }
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error retrieving roles",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/roles/searchByID": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Search for roles using a partial or full role ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Search roles by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the roles matching the search criteria",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Role"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameter",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error searching roles by ID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/roles/searchByName": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Search for roles using a partial or full role name.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Search roles by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role Name",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the roles matching the search criteria",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Role"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameter",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error searching roles by name",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/roles/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a role's details by its ID, including its permissions.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Get a role by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role details with permissions",
                        "schema": {
                            "$ref": "#/definitions/dtos.RoleDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid role ID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Role not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/roles/{id}/exist": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Check whether a role exists in the system by its ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Check if a role exists",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a boolean indicating if the role exists",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid role ID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error checking role existence",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/roles/{id}/permission": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve all permissions assigned to a specific role by its ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Get all permissions of a specific role",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of permissions for the role",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid role ID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error retrieving permissions for role",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/sales-report/invoices": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve invoices that were generated between the given start and end dates.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sales-report"
                ],
                "summary": "Fetch invoices between specified dates",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start Date (RFC3339 format)",
                        "name": "startDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End Date (RFC3339 format)",
                        "name": "endDate",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of invoices between the given dates",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.SalesReportInvoiceDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid date format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error fetching invoices",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tax-types": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches the list of all available tax types.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tax-types"
                ],
                "summary": "Retrieve all tax types",
                "responses": {
                    "200": {
                        "description": "List of tax types",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.TaxType"
                            }
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error retrieving tax types",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new tax type by providing its details (name, percentage, etc).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tax-types"
                ],
                "summary": "Create a new tax type",
                "parameters": [
                    {
                        "description": "Tax Type Details",
                        "name": "tax",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TaxType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created tax type",
                        "schema": {
                            "$ref": "#/definitions/models.TaxType"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error creating tax type",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tax-types/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches the details of a tax type specified by the provided ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tax-types"
                ],
                "summary": "Retrieve a tax type by its ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tax Type ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of the tax type",
                        "schema": {
                            "$ref": "#/definitions/models.TaxType"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Tax type not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-state-types": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a list of all user state types available in the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user_state_types"
                ],
                "summary": "Get all user state types",
                "responses": {
                    "200": {
                        "description": "List of User State Types",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.UserStateType"
                            }
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-state-types/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a user state type by its unique ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user_state_types"
                ],
                "summary": "Get user state type by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User State Type ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User State Type details",
                        "schema": {
                            "$ref": "#/definitions/models.UserStateType"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User State Type not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-types": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a list of all user types along with their associated roles.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user_types"
                ],
                "summary": "Get all user types",
                "responses": {
                    "200": {
                        "description": "List of user types",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.UserTypeDTO"
                            }
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error retrieving user types",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-types/searchByID": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Searches for user types based on the provided user type ID query.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user_types"
                ],
                "summary": "Search user types by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Type ID Query",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of user types matching the ID query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.UserTypeDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameter",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error searching user types",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-types/searchByName": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Searches for user types based on the provided user type name query.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user_types"
                ],
                "summary": "Search user types by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Type Name Query",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of user types matching the name query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.UserTypeDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameter",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error searching user types",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-types/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a user type based on the provided user type ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user_types"
                ],
                "summary": "Get user type by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User Type ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User type information",
                        "schema": {
                            "$ref": "#/definitions/dtos.UserTypeDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid user type ID format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User type not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user-types/{id}/exists": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Checks if a user type exists based on the provided user type ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user_types"
                ],
                "summary": "Check if a user type exists",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Type ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Existence status of the user type",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user type ID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error checking user type existence",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a list of all users in the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.GetUserDTO"
                            }
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Users not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error retrieving users",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new user with the provided email, password, user type, and state.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User details to create",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.CreateUserDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created user information",
                        "schema": {
                            "$ref": "#/definitions/dtos.GetUserDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Email already in use",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error creating user",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/searchByEmail": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Searches for users by email based on the provided query parameter.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Search users by email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User email to search",
                        "name": "email",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users matching the search criteria",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.GetUserDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Query parameter is required",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Users not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error searching users",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/searchByID": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Searches for users by ID based on the provided query parameter.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Search users by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID to search",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users matching the search criteria",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.GetUserDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Query parameter is required",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Users not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error searching users",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a user by their ID. Returns user details if found, otherwise returns an error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get a user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details",
                        "schema": {
                            "$ref": "#/definitions/dtos.GetUserDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error retrieving user",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates user details such as email, password, user type, and state.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User details to update",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.UpdateUserDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated user information",
                        "schema": {
                            "$ref": "#/definitions/dtos.GetUserDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error updating user information",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}/state": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates the state of a user based on the provided user ID and state value.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user state",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User state to update",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated user information",
                        "schema": {
                            "$ref": "#/definitions/dtos.GetUserDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Error updating user state",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.LoginData": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "controllers.SubtotalResponse": {
            "type": "object",
            "properties": {
                "subtotal": {
                    "type": "number"
                }
            }
        },
        "controllers.TotalResponse": {
            "type": "object",
            "properties": {
                "total": {
                    "type": "number"
                }
            }
        },
        "controllers.request": {
            "type": "object",
            "properties": {
                "user_state": {
                    "description": "Correctly defines the JSON binding",
                    "type": "integer"
                }
            }
        },
        "dtos.BillingItemDTO": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "stock": {
                    "type": "integer"
                }
            }
        },
        "dtos.CalculateTotalRequestDTO": {
            "type": "object",
            "properties": {
                "discountTypesIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "itemsDTO": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.BillingItemDTO"
                    }
                },
                "taxTypesIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "dtos.CreateCommentDTO": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "residence_city": {
                    "type": "string"
                },
                "residence_state": {
                    "type": "string"
                }
            }
        },
        "dtos.CreateCustomerDTO": {
            "type": "object",
            "required": [
                "customerId",
                "customerName",
                "email",
                "identifierTypeId",
                "lastName"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "customerId": {
                    "type": "string"
                },
                "customerName": {
                    "type": "string"
                },
                "customerState": {
                    "type": "boolean"
                },
                "email": {
                    "type": "string"
                },
                "identifierTypeId": {
                    "type": "integer"
                },
                "isBusiness": {
                    "type": "boolean"
                },
                "lastName": {
                    "type": "string"
                },
                "phoneNumbers": {
                    "type": "string"
                }
            }
        },
        "dtos.CreateEmployeeDTO": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "identifier_type_id": {
                    "type": "integer"
                },
                "last_names": {
                    "type": "string"
                },
                "names": {
                    "type": "string"
                },
                "personal_id": {
                    "type": "string"
                },
                "phone_numbers": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "dtos.CreateExternalSaleDTO": {
            "type": "object",
            "required": [
                "customerId",
                "customerName",
                "email",
                "identifierTypeId",
                "item_id",
                "lastName",
                "reporter_id",
                "reporter_name"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "customerId": {
                    "type": "string"
                },
                "customerName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "identifierTypeId": {
                    "type": "integer"
                },
                "isBusiness": {
                    "type": "boolean"
                },
                "item_id": {
                    "type": "integer"
                },
                "lastName": {
                    "type": "string"
                },
                "phoneNumbers": {
                    "type": "string"
                },
                "reporter_id": {
                    "type": "string"
                },
                "reporter_name": {
                    "type": "string"
                },
                "stock": {
                    "type": "integer"
                }
            }
        },
        "dtos.CreateInvoiceDTO": {
            "type": "object",
            "properties": {
                "customer_id": {
                    "type": "integer"
                },
                "discounts": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "enterprise_data": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.BillingItemDTO"
                    }
                },
                "taxes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "dtos.CreatePurchaseOrderDTO": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.BillingItemDTO"
                    }
                }
            }
        },
        "dtos.CreateUserDTO": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "user_state": {
                    "type": "integer"
                },
                "user_type": {
                    "type": "integer"
                }
            }
        },
        "dtos.GetCommentDTO": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "residence_city": {
                    "type": "string"
                },
                "residence_state": {
                    "type": "string"
                }
            }
        },
        "dtos.GetCustomerDTO": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "customerId": {
                    "type": "string"
                },
                "customerName": {
                    "type": "string"
                },
                "customerState": {
                    "type": "boolean"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "identifierTypeId": {
                    "type": "integer"
                },
                "isBusiness": {
                    "type": "boolean"
                },
                "lastName": {
                    "type": "string"
                },
                "phoneNumbers": {
                    "type": "string"
                }
            }
        },
        "dtos.GetEmployeeDTO": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "identifier_type_id": {
                    "type": "integer"
                },
                "last_names": {
                    "type": "string"
                },
                "names": {
                    "type": "string"
                },
                "personal_id": {
                    "type": "string"
                },
                "phone_numbers": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "dtos.GetExternalSaleDTO": {
            "type": "object",
            "properties": {
                "customer_email": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "item_id": {
                    "type": "integer"
                },
                "item_name": {
                    "type": "string"
                },
                "reporter_id": {
                    "type": "string"
                },
                "reporter_name": {
                    "type": "string"
                },
                "stock": {
                    "type": "integer"
                }
            }
        },
        "dtos.GetInvoiceDTO": {
            "type": "object",
            "properties": {
                "customer_id": {
                    "type": "integer"
                },
                "date_time": {
                    "type": "string"
                },
                "discounts": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "enterprise_data": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.BillingItemDTO"
                    }
                },
                "subtotal": {
                    "type": "number"
                },
                "taxes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "total": {
                    "type": "number"
                }
            }
        },
        "dtos.GetItemDTO": {
            "type": "object",
            "properties": {
                "additional_expenses": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "item_state": {
                    "type": "boolean"
                },
                "item_type_id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "purchase_price": {
                    "type": "number"
                },
                "selling_price": {
                    "type": "number"
                },
                "stock": {
                    "type": "integer"
                }
            }
        },
        "dtos.GetPurchaseOrderDTO": {
            "type": "object",
            "properties": {
                "customer_id": {
                    "description": "Cambiado a puntero",
                    "type": "integer"
                },
                "date_time": {
                    "type": "string"
                },
                "discounts": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.BillingItemDTO"
                    }
                },
                "order_state_id": {
                    "type": "integer"
                },
                "responsible_id": {
                    "description": "Cambiado a puntero",
                    "type": "integer"
                },
                "seller_id": {
                    "description": "Cambiado a puntero",
                    "type": "integer"
                },
                "sub_total": {
                    "type": "number"
                },
                "taxes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "total": {
                    "type": "number"
                }
            }
        },
        "dtos.GetUserDTO": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "password": {
                    "type": "string"
                },
                "user_state": {
                    "type": "integer"
                },
                "user_type": {
                    "type": "integer"
                }
            }
        },
        "dtos.RoleDTO": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dtos.SalesReportInvoiceDTO": {
            "type": "object",
            "properties": {
                "date_time": {
                    "type": "string"
                },
                "discounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.DiscountType"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.BillingItemDTO"
                    }
                },
                "subtotal": {
                    "type": "number"
                },
                "taxes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.TaxType"
                    }
                },
                "total": {
                    "type": "number"
                }
            }
        },
        "dtos.UpdateAdditionalExpenseDTO": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "expense": {
                    "type": "number"
                },
                "item_id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dtos.UpdateCommentDTO": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "residence_city": {
                    "type": "string"
                },
                "residence_state": {
                    "type": "string"
                }
            }
        },
        "dtos.UpdateCustomerDTO": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "customerId": {
                    "type": "string"
                },
                "customerName": {
                    "type": "string"
                },
                "customerState": {
                    "type": "boolean"
                },
                "email": {
                    "type": "string"
                },
                "identifierTypeId": {
                    "type": "integer"
                },
                "isBusiness": {
                    "type": "boolean"
                },
                "lastName": {
                    "type": "string"
                },
                "phoneNumbers": {
                    "type": "string"
                }
            }
        },
        "dtos.UpdateEmployeeDTO": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "identifier_type_id": {
                    "type": "integer"
                },
                "last_names": {
                    "type": "string"
                },
                "names": {
                    "type": "string"
                },
                "personal_id": {
                    "type": "string"
                },
                "phone_numbers": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "dtos.UpdateItemDTO": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "item_state": {
                    "type": "boolean"
                },
                "item_type_id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "purchase_price": {
                    "type": "number"
                },
                "selling_price": {
                    "type": "number"
                },
                "stock": {
                    "type": "integer"
                }
            }
        },
        "dtos.UpdateUserDTO": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "user_state": {
                    "type": "integer"
                },
                "user_type": {
                    "type": "integer"
                }
            }
        },
        "dtos.UserTypeDTO": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.AdditionalExpense": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "expense": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "item_id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.Appointment": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "customerId": {
                    "type": "integer"
                },
                "customerName": {
                    "type": "string"
                },
                "customerState": {
                    "type": "boolean"
                },
                "dateTime": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "identifierTypeId": {
                    "type": "integer"
                },
                "isBusiness": {
                    "type": "boolean"
                },
                "lastName": {
                    "type": "string"
                },
                "phoneNumbers": {
                    "type": "string"
                },
                "state": {
                    "type": "boolean"
                }
            }
        },
        "models.Customer": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "customerId": {
                    "type": "string"
                },
                "customerName": {
                    "description": "puede ser nulo",
                    "type": "string"
                },
                "customerState": {
                    "type": "boolean"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "identifierTypeId": {
                    "type": "integer"
                },
                "isBusiness": {
                    "type": "boolean"
                },
                "lastName": {
                    "type": "string"
                },
                "phoneNumbers": {
                    "type": "string"
                }
            }
        },
        "models.DiscountType": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_percentage": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "models.HistoricalItemPrice": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "item_id": {
                    "type": "integer"
                },
                "modified_at": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                }
            }
        },
        "models.IdentifierType": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.ItemType": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "models.OrderStateType": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                }
            }
        },
        "models.Permission": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.Role": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Permission"
                    }
                }
            }
        },
        "models.TaxType": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_percentage": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "models.UserStateType": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "Totes Backend API",
	Description:      "This is a sample API documentation for the Totes backend using Gin and Swagger.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
